//정렬
//배열의 자료를 원하는 순으로 배치하는것.

/*순차 정렬 (Sequential Sort)
순차 정렬은 맨 앞에서 부터 제일 작은 원소를
배치하게 만들어 나가는 알고리즘이다*/

/*버블정렬(Bubble Sort)
앞에서 부터 이웃하는 원소의 값을 비교하여 
위치를 교환하는 것을 반복하며 끝까지
반복하면 제일 큰 값이 맨뒤에 위치한다
그리고 정렬할 개수를 1 줄인후 다시 반복하며
정렬할 원소의 개수가 1이면 모든 반복이 완료*/

/*선택정렬(Selection Sort)
제일 큰 값을 찾아 맨 뒤의 요소와 교체하는 방법을
반복하여 전체를 정렬하는 알고리즘이다.
반대로도 제일 작은 값을 찾아 맨 앞의 요소와
교체하는 방법을 반복할 수도 있다.*/

/*삽입 정렬(Insertion Sort)
삽입 정렬 알고리즘은 점진적으로 정렬 범위를
넓혀 나가는 방식으로 정렬하는 알고리즘이다.
이를 위해 새로운 범위에 포함하는 마지막
원소를 앞으로 이동하면서 자신보다 작은
요소를 찾을 떄까지 이동하면서 자리를 교환한다*/

/*쉘 정렬(Shell Sort)
쉘 정렬은 삽입 정렬 알고리즘을 이용하는 정렬 방식이다
같은 간격에 있는 원소들을 삽입 정렬 원리로 정렬하는 것을 반복
간격의 초기값은 배열의 크기 /2 이며 간격이 1일떄까지 
1/2로 줄이면서 반복한다*/

/*퀵 정렬Quick Sort)
퀵 정렬은 재귀적인 방법으로 문제를 해결하는 알고리즘
피벗 값을 선택하여 피벗 값보다 작은 값들은 왼쪽으로
보내고 큰 값들은 오른쪽으로 보낸 후에 이들 사이에
피벗을 위치시키는 원리를 이용
이후 피벗보다 작은 값들을 재귀 호출로 정렬하고
피벗보다 큰 값들도 재구호출로 정렬 하는 방식이다

주의 할 점으로는 퀵 정렬은 어떠한 요소를 피벗으로
선택하냐에 따라 성능에 차이가 생긴다
만약 전체 요소의 중간 순위의 요소를 선택 하면
재귀 호출에서 반씩나누어 정렬을 하게되어
좋은 성능을 발휘한다
반대로 가장 작은 값이나 가장 큰값을 피벗으로
선택하면 최악의 성능을 발휘한다*/

/*병합 정렬(Merge Sort)
병합 정렬은 배열을 작은 단위의 배열로 분할한 후에
분할한 배열을 정렬하고 이들을 다시 정렬하면서
전체 배열을 정렬하는 알고리즘이다*/

/*힙 정렬(Heap Sort)
힙 정렬은 힙 트리를 이용하는 알고리즘이다
최대 힙을 사용하면 크기 순으로 정렬하고
최소 합을 사용하면 크기 역순으로 정렬한다
힙 정렬은 먼저 힙트리를 구성하고 루트의 값고
맨 마지막 값을 교환한 후에 정렬 범위를 1 줄인다
반복하여 정렬 범위가 1일 때까지 반복한다
최대 힙 트리에서 루트는 최대 값을 갖는다
마지막 값과 교환 하면 제일 큰값이 맨 뒤로 배치할수 있다
그 뒤에 정렬 범위를 줄여 나가면 최종적으로 정렬 상태가 완성*/