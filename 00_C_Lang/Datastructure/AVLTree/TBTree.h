#pragma once
#ifndef __BINARY_TREE3_H__
#define __BINARY_TREE3_H__

typedef int BTData;

typedef struct _bTreeNode
{
	BTData data;
	struct _bTreeNode* left;
	struct _bTreeNode* right;
}BTreeNode;

BTreeNode* MakeBTreeNode(void);
BTData GetData(BTreeNode* bt);
void SetData(BTreeNode* bt, BTData data);

BTreeNode* GetLeftSubTree(BTreeNode* bt);
BTreeNode* GetRightSubTree(BTreeNode* bt);

void MakeLeftSubTree(BTreeNode* main, BTreeNode* sub);
void MakeRightSubTree(BTreeNode* main, BTreeNode* sub);

typedef void VisitFuncPtr(BTData data);

void PreorderTraverse(BTreeNode* bt, VisitFuncPtr action);
void InorderTraverse(BTreeNode* bt, VisitFuncPtr action);
void PostorderTraverse(BTreeNode* bt, VisitFuncPtr action);

//왼쪽 자식 노드 제거, 제거된 노드의 주소 값이 반환된다.
BTreeNode* RemoveLeftSubTree(BTreeNode* bt);

//오른쪽 자식 노드 제거, 제거된 노드의 주소 값이 반환된다
BTreeNode* RemoveRightSubTree(BTreeNode* bt);

//메모리 소멸을 수반하지 않고 main의 왼쪽 자식 노드를 변경한다.
void ChangeLeftSubTree(BTreeNode* main, BTreeNode* sub);

//메모리 소멸을 수반하지 않고 main의 오른쪽 자식 노드를 변경한다.
void ChangeRightSubTree(BTreeNode* main, BTreeNode* sub);


typedef BTData BSTData;

//이진 탐색 트리의 생성 및 초기화
void BSTMakeAndInit(BTreeNode** pRoot);

//노드에 저장된 데이터 반환
BSTData BStGetNodeData(BTreeNode* bst);

//이진 탐색 트리를 대상으로 데이터 저장(노드의 생성과정 포함)
void BSTInsert(BTreeNode**pRoot, BSTData data);

//이진 탐색 트리를 대상으로 데이터 탐색
BTreeNode* BSTSearch(BTreeNode* bst, BSTData target);

//트리에서 노드를 제거하고 제거된 노드의 주소값을 반환한다.
BTreeNode* BSTRemove(BTreeNode**pRoot, BSTData Target);

//이진 탐색트리에 저장된 모든 노드의 데이터를 출력한다.
void BSTSHowAll(BTreeNode* bst);
#endif
